name: Build and push multi-architecture Docker image
description: >
  Builds and pushes a multi-architecture Docker image using QEMU and buildx.
inputs:
  cache-key:
    description: Cache key for the image, used to preserve Docker layer cache.
    required: true
  build-args:
    description: List of build-time variables
    required: false
  context:
    description: Directory to use for the build context
    required: false
  file:
    description: Path to the Dockerfile
    required: false
  labels:
    description: List of metadata for an image
    required: false
  platforms:
    description: List of target platforms for build
    required: false
  pull:
    description: Always attempt to pull a newer version of the image
    required: false
    default: 'false'
  push:
    description: Whether or not to push the resulting image
    required: false
    default: 'false'
  tags:
    description: List of tags
    required: false
  sign_image:
    description: If true cosign is used to sign the image, if push is true
    required: false
    default: 'true'
runs:
  using: composite
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all

    # Ideas from:
    # https://github.com/actions/starter-workflows/blob/main/ci/docker-publish.yml
    # Install the cosign tool except on PR
    # https://github.com/sigstore/cosign-installer
    - name: Install cosign
      if: ${{ inputs.sign_image == 'true' && inputs.push == 'true' }}
      uses: sigstore/cosign-installer@v3.4.0

    # Set up BuildKit Docker container builder to be able to build
    # multi-platform images and export cache
    # https://github.com/docker/setup-buildx-action
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push image
      id: build-and-push
      uses: docker/build-push-action@v5
      with:
        build-args: ${{ inputs.build-args }}
        context: ${{ inputs.context }}
        file: ${{ inputs.file }}
        labels: ${{ inputs.labels }}
        platforms: ${{ inputs.platforms }}
        pull: ${{ inputs.pull }}
        push: ${{ inputs.push }}
        tags: ${{ inputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Split branch name
      env:
        TAGS: ${{ inputs.tags }}
      id: split
      shell: bash
      run: |
        tags=()
        for i in $TAGS; do tags+=($i); done
        echo "TAG=${tags[-1]}" >> $GITHUB_OUTPUT

    - name: Run Trivy vulnerability scanner for SARIF
      uses: aquasecurity/trivy-action@0.16.1
      with:
        image-ref: ${{ steps.split.outputs.TAG }}
        format: sarif
        output: trivy-results.sarif

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif

    - name: Fail if scan has CRITICAL vulnerabilities
      uses: aquasecurity/trivy-action@0.16.1
      with:
        image-ref: ${{ steps.split.outputs.TAG }}
        format: table
        exit-code: '1'
        severity: 'CRITICAL'
        ignore-unfixed: true

    # Sign the resulting Docker image digest except on PRs.
    # This will only write to the public Rekor transparency log when the Docker
    # repository is public to avoid leaking data.  If you would like to publish
    # transparency data even for private images, pass --force to cosign below.
    # https://github.com/sigstore/cosign
    - name: Sign the images with GitHub OIDC Token
      if: ${{ inputs.sign_image == 'true' && inputs.push == 'true' }}
      # This step uses the identity token to provision an ephemeral certificate
      # against the sigstore community Fulcio instance.
      shell: bash
      run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}
      env:
        TAGS: ${{ inputs.tags }}
        DIGEST: ${{ steps.build-and-push.outputs.digest }}
